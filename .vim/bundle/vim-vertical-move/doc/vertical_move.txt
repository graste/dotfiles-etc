*vertical_move.txt*        Motions that move a cursor 'up' or 'down' as many
                         lines as possible without changing the cursor column.
                         With these motions - cursor always stays in the same
                         column.

Here's the obligatory ascii art:
                         _   _           _                              ~
         __   _____ _ __| |_(_) ___ __ _| |   _ __ ___   _____   _____  ~
         \ \ / / _ \ '__| __| |/ __/ _` | |  | '_ ` _ \ / _ \ \ / / _ \ ~
          \ V /  __/ |  | |_| | (_| (_| | |  | | | | | | (_) \ V /  __/ ~
           \_/ \___|_|   \__|_|\___\__,_|_|  |_| |_| |_|\___/ \_/ \___| ~


Author: Bruno Sutic <https://www.github.com/bruno->

|vertical-move-introduction|			Short introduction
|vertical-move-usage|				Useful usage example
|vertical-move-mappings|			Provided mappings
|vertical-move-examples|			Detailed examples
|vertical-move-about|				Why the plugin is created
|vertical-move-contributing|			Development setup instructions
|vertical-move-changelog|			Changelog
|vertical-move-license|				MIT


INTRODUCTION			*vertical-move* *vertical-move-introduction*

This plugin adds vertical move motions to vim. They move the cursor 'up' or
'down' as many lines as possible without changing the cursor column position.
With these motions - cursor always stays in the same column!
This is especially useful when manipulating text in visual-block mode.


USAGE							*vertical-move-usage*

Example presented here is also available as an animated gif on the project
repository page
	https://github.com/bruno-/vim-vertical-move

Vertical move motions are really useful when manipulating text in visual block
mode.
A good example that shows this is presented below. Let's say you want to change
the background image url for classes `img_01` to `img_05`.
The cursor is represented as a pipe character `|`, currently in the first line.
>
	.img_01 { background-image: image-url('|service-1-sprite.png'); }
	.img_02 { background-image: image-url('service-1-sprite.png'); }
	.img_03 { background-image: image-url('service-1-sprite.png'); }
	.img_04 { background-image: image-url('service-1-sprite.png'); }
	.img_05 { background-image: image-url('service-1-sprite.png'); }

	.img_06 { background-image: image-url('service-2-sprite.png'); }
	.img_07 { background-image: image-url('service-2-sprite.png'); }
<

To accomplish the task, we want to visually select all 5 instances of text
'service-1-sprite.png' with visual block mode and change it.

Enter visual block mode with |<CTRL-V>| and press `]v`.
Cursor will stay in the same text column and go down 4 lines, still in visual
block mode.
This is similar but different from the `}` motion behavior, where the cursor
would end up on the empty line below (in the first column), which is not
desirable in this context.
>
	.img_01 { background-image: image-url('service-1-sprite.png'); }
	.img_02 { background-image: image-url('service-1-sprite.png'); }
	.img_03 { background-image: image-url('service-1-sprite.png'); }
	.img_04 { background-image: image-url('service-1-sprite.png'); }
	.img_05 { background-image: image-url('|service-1-sprite.png'); }

	.img_06 { background-image: image-url('service-2-sprite.png'); }
	.img_07 { background-image: image-url('service-2-sprite.png'); }
<

The last command that will visually select text we want to update is `f'` which
places a cursor at the end of 'service-1-sprite.png' string in line 5.
Now it's easy to change the selected text, for example with `c` command (but we
won't go further than that, since the point is illustrated).
>
	.img_01 { background-image: image-url('service-1-sprite.png'); }
	.img_02 { background-image: image-url('service-1-sprite.png'); }
	.img_03 { background-image: image-url('service-1-sprite.png'); }
	.img_04 { background-image: image-url('service-1-sprite.png'); }
	.img_05 { background-image: image-url('service-1-sprite.png|'); }

	.img_06 { background-image: image-url('service-2-sprite.png'); }
	.img_07 { background-image: image-url('service-2-sprite.png'); }
<

MAPPINGS						*vertical-move-mappings*

Just 2 mappings are provided by default:
							*vertical-move-up*
[count] [v			Moves 'up' as many lines as possible without
				changing the cursor column.

							*vertical-move-down*
[count] ]v			Moves 'down' as many lines as possible. Also
				doesn't change the cursor column.

						*g:vertical_move_default_mapping*
You can remap these mappins to your liking. Here's the example how to remap
the vertical move motions to `<leader>j` and `<leader>k` in your .vimrc:
>
	let g:vertical_move_default_mapping = 0
	nmap <silent> <leader>j <Plug>(vertical_move_down)
	nmap <silent> <leader>k <Plug>(vertical_move_up)
	xmap <silent> <leader>j <Plug>(vertical_move_down)
	xmap <silent> <leader>k <Plug>(vertical_move_up)
<

EXAMPLES						*vertical-move-examples*

This plugin is little bit hard to verbally explain so here are the step-by-step
examples of how it works.

They say a picture is worth a thousand words. Video then should be worth even
more. There are animated gifs that show the behavior of this plugin on the
project's github repository:
	https://github.com/bruno-/vim-vertical-move

Example 1: ~

In the below example cursor is near the end of first line (marked with `|`).
Lines contain a number at the beginning so they are easier referenced. Line 4
is an empty line.
>
	1. Lorem ipsum dolor sit amet|,
	2. consectetur adipisicing elit,
	3. sed do eiusmod tempor incididunt

	5. ut labore et dolore magna aliqua.
	6. Ut enim ad minim veniam.
<

When `]v` is pressed, cursor will go down as many lines as it can, without
changing the cursor column. The new cursor position is in the last word of
line 3 (see the `|` sign?). That position is exactly 2 characters below the
position the cursor had in line 1. It is equivalent to pressing 'jj' two times
in normal mode.
Cursor won't go to the line 4, because it would automatically be positioned in
the column 1 there. That would violate the requirement of this plugin:
"cursor always stays in the same column".
>
	1. Lorem ipsum dolor sit amet,
	2. consectetur adipisicing elit,
	3. sed do eiusmod tempor inci|didunt

	5. ut labore et dolore magna aliqua.
	6. Ut enim ad minim veniam.
<

Notice this is similar to `}` motion. With `}`, cursor would end up on line 4
(outside the paragraph), whereas with vertical-move, cursor always stays
within it.

If `]v` is pressed again, cursor will jump over the gap (empty line) and
continue on line 5. It will stop just before the last word in line 5 (cursor
indicated by `|` character) in the same text column as it was in the line 3
and in line 1 before that.
Cursor won't go to line 6, because by doing that it would automatically be
placed in a different text column (since line 6 is shorter than the current
cursor position in line 5).
>
	1. Lorem ipsum dolor sit amet,
	2. consectetur adipisicing elit,
	3. sed do eiusmod tempor incididunt

	5. ut labore et dolore magna |aliqua.
	6. Ut enim ad minim veniam.
<

By pressing the `[v`, cursor will now jump over the gap in the upward
direction and go 'up' as much as possible without changing the text colum. You
might have guessed it, it will end up in in the same spot as it was before, at
the end of line 1.
>
	1. Lorem ipsum dolor sit amet|,
	2. consectetur adipisicing elit,
	3. sed do eiusmod tempor incididunt

	5. ut labore et dolore magna aliqua.
	6. Ut enim ad minim veniam.
<

Example 2: ~

This example clarifies the behavior of this plugin when there's no empty line.
As in the previous example, we start on line 1. Cursor is indicated by the `|`
character.
>
	1. Lorem ipsum dolor sit amet|,
	2. consectetur adipisicing elit,
	3. sed do
	4. eiusmod tempor incididunt ut labore
	5. et dolore magna aliqua.
<

When `]v` is pressed, cursor goes down just one line. It won't go to line 3
because by doing that, it would automatically change text column.
This example strives to emphasize that any line with fewer characters than
current cursor position number is considered 'a gap'.
>
	1. Lorem ipsum dolor sit amet,
	2. consectetur adipisicing el|it,
	3. sed do
	4. eiusmod tempor incididunt ut labore
	5. et dolore magna aliqua.
<

If `]v` is pressed again, since cursor is just next to 'the gap', it will jump
over it and end up in line 4.
If `]v` is pressed again, cursor won't move. This example file does not have
line 6. If it moved down to line 5, it would change current text column, so
that won't happen.
>
	1. Lorem ipsum dolor sit amet,
	2. consectetur adipisicing elit,
	3. sed do
	4. eiusmod tempor incididunt |ut labore
	5. et dolore magna aliqua.
<

ABOUT							*vertical-move-about*

As mentioned in the examples and usage sections, this plugin is written from
the desire to better handle text manipulation, especially in |visual-block|
mode.
The 'need' for this motion came repeatedly in author's day-to-day work. After
learning enough vim script, this plugin was born.


CONTRIBUTING					 *vertical-move-contributing*

Plugin repository is on github:
	https://github.com/bruno-/vim-vertical-move

Development environment ~

This plugin has a test suite written in 'vspec'. 'vspec' itself depends
on a ruby gem 'vim-flavor'. Here are the steps to run the specs locally.

Clone the git repo
	git clone https://github.com/bruno-/vim-vertical-move
	cd vim-vertical-move

Install the gems specified in Gemfile. This requires the bundler gem to be
installed.
	bundle install

Run the specs with
	bundle exec rake test

You should see the test suite output with a message 'All tests successful'

For more informaion about 'vspec' plugin, link to vimcast tutorial and other
visit
	https://github.com/kana/vim-vspec

Contributing ~

Code contributions and patches are welcome. If the patch contains a
non-trivial update, please also write tests for it.

Contributors ~

A list of code contributors:
	itchyny (https://github.com/itchyny)


CHANGELOG						*vertical-move-changelog*

	v2.1.0:	February 13, 2015	* Improve string length calculation,
					  various improvements
	v2.0.0:	February 2, 2014	* Change default mappings to ]v and [v
					  because 'leader mappings are lame'
					  (http://lanyrd.com/2014/vimlondon/scwggw/)
	v1.0.1:	December 21, 2013	* Always use 'norm!' - fixes bug with
					  wrapped lines
	v1.0.0:	December 5, 2013	* @itchyny enables configurable
					  mappings.
	v0.0.4:	November 30, 2013	* Change name to vim-vertical-move
	v0.0.3:	November 24, 2013	* Add operator pending mappings and
					  specs for them
	v0.0.2:	November 24, 2013	* Added documentation
	v0.0.1:	November 23, 2013	* Initial working version. Added
					  animated gifs that show plugin
					  behavior


LICENSE							*vertical-move-license*

Copyright (c) Bruno Sutic. Distributed under the MIT license.

 vim:tw=78:ts=8:ft=help:norl:
